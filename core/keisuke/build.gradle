// build.gradle as a single project
//  or as a sub-project of the multi-project
//  which configurations are defined by ../../settings.gradle.

plugins {
  id 'java'
  id 'checkstyle'
  id 'findbugs'
  id 'jacoco'
  id 'com.github.johnrengelman.shadow' version '2.0.4'
}

// when change version status from snapshot to release,
// change "version" and "deployUrl".

group = 'keisuke'
//name : 'keisuke' as single project
version = '2.0.0'
//@@version = '2.0.0-SNAPSHOT'
def deployUrl = 'http://localhost:8081/repository/maven-releases'
//@@def deployUrl = 'http://localhost:8081/repository/maven-snapshots'

description = """keisuke : counts source code steps like as stepcounter"""

def defaultEncoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { // for org.jenkins-ci.dom4j
        url 'https://repo.jenkins-ci.org/public/'
    }
}

dependencies {
    compile 'com.googlecode.java-diff-utils:diffutils:1.3.0'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'commons-io:commons-io:2.4'
    compile 'org.jenkins-ci.dom4j:dom4j:1.6.1-jenkins-4'
    compile 'net.sf.jxls:jxls-core:1.0.6'
    compile 'org.apache.ant:ant:1.9.9'
    compile 'org.apache.poi:poi:3.9'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.jacoco:org.jacoco.agent:0.7.9'
    testCompile 'org.jacoco:org.jacoco.ant:0.7.9'
    checkstyle 'com.puppycrawl.tools:checkstyle:8.1'
    findbugs 'com.google.code.findbugs:findbugs:3.0.1'
}

tasks.withType(JavaCompile) {
    options.encoding = defaultEncoding
}
sourceCompatibility = 1.6
targetCompatibility = 1.6

checkstyle {
    toolVersion = '8.1'
    configFile = file('config/checkstyle/sun_checks_custom.xml')
    //reportsDir = file("${buildDir}/reports/checkstyle")
    ignoreFailures = true
}

checkstyleTest {
    excludes = ['**/*']
}

findbugs {
    toolVersion = '3.0.5'
    //reportsDir = file("${buildDir}/reports/findbugs")
    ignoreFailures = true
}

def dirPathForOutputOfTestRun = 'test/out'

task cleanAll(type: Delete) {
    delete dirPathForOutputOfTestRun
    dependsOn clean
    doLast {
        println("Delete ${dirPathForOutputOfTestRun}")
    }
}

task makeDirForTest {
    doLast {
        def outDir = file(dirPathForOutputOfTestRun)
        if (!outDir.exists()) {
            outDir.mkdirs()
            println("makeDir ${dirPathForOutputOfTestRun}")
        }
    }
}

// Definitions about test data 
def dirPathOfTestDataZip = 'test/archive'
def zipPathOfTestData = 'test/archive/data.zip'
def dirPathOfTestData = 'test/data'
def dirPathDummy = 'build/test/dummy'

sourceSets {
    testdata {
        java.srcDirs = []
        resources.srcDirs = [dirPathOfTestData]
        //output.classesDir = dirPathDummy
        output.resourcesDir = 'build/test/data'
    }
}

compileTestdataJava.setActions Arrays.asList()
testdataClasses.setActions Arrays.asList()

task makeZipOfTestData(dependsOn: processTestdataResources, type: Zip) {
    baseName = 'data'
    version = null
    destinationDir = file(dirPathOfTestDataZip)
    from(dirPathOfTestData) {
        include '**'
        includeEmptyDirs = true
    }
    doFirst {
        if (!file(dirPathOfTestData).exists()) {
            println("Fail because it does not exist: ${dirPathOfTestData}")
            throw new Exception("Not exist ${dirPathOfTestData}")
        }
        //if (file(zipPathOfTestData).exists()) {
        //    println("Fail because it already exists: ${zipPathOfTestData}")
        //    throw new Exception("Already exists ${zipPathOfTestData}")
        //}
    }
    doLast {
        println("Archive test data into zip file: ${zipPathOfTestData}")
    }
}

sourceSets {
    testzip {
        java.srcDirs = []
        resources.srcDirs = [dirPathOfTestDataZip]
        //output.classesDir = dirPathDummy
        output.resourcesDir = 'build/test/archive'
    }
}

compileTestzipJava.setActions Arrays.asList()
testzipClasses.setActions Arrays.asList()

task extractTestData(dependsOn: processTestzipResources, type: Copy) {
    from(zipTree(zipPathOfTestData)) {
        include '**'
        includeEmptyDirs = true
    }
    into dirPathOfTestData
    def copyFiles = []
    eachFile {
        copyFiles << it
    }
    doLast {
        copyFiles.each {
            FileCopyDetails detail ->
            def node = file("${dirPathOfTestData}/${detail.path}")
            if (node.exists()) {
                node.setLastModified(detail.lastModified)
            }
        }
        println("Extract test data into dir: ${dirPathOfTestData}")
    }
}

test {
    // The files used as expected data for assertion are encoded with "ja_JP.UTF-8"
    systemProperty 'file.encoding', "${defaultEncoding}"
    systemProperty 'user.language', 'ja'
    systemProperty 'user.country', 'JP'
    //testLogging.showStandardStreams = true
    ignoreFailures = true
    jacoco {
        //append = false
        destinationFile = file("${buildDir}/jacoco/Test.exec")
    }
    dependsOn makeDirForTest, extractTestData
}

jacoco {
    toolVersion = '0.7.9'
    //reportsDir = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco")
    }
    dependsOn test
}

jar {
    baseName = project.name
    version = project.version
    manifest {
        attributes 'Implementation-Title':"${baseName}", 'Implementation-Version':"${version}"
    }
}

def suffixFatJar = 'jar-with-dependencies'

shadowJar {
    baseName = project.name
    version = project.version
    classifier = suffixFatJar
    manifest {
        attributes 'Implementation-Title':"${baseName}-${classifier}", 'Implementation-Version':"${version}"
    }
    dependsOn build
}

def suffixSrcJar = 'sources'

task sourcesJar(type: Jar) {
    baseName = project.name
    version = project.version
    classifier = suffixSrcJar
    from sourceSets.main.allSource
    manifest {
        attributes 'Implementation-Title':"${baseName}-${classifier}", 'Implementation-Version':"${version}"
    }
    dependsOn build
}

def suffixTestJar = 'tests'

task testsJar(type:Jar) {
    baseName = project.name
    version = project.version
    classifier = suffixTestJar
    from sourceSets.test.output
    manifest {
        attributes 'Implementation-Title':"${baseName}-${classifier}", 'Implementation-Version':"${version}"
    }
    dependsOn build
}

task makeArtifacts(dependsOn: [sourcesJar, shadowJar, testsJar]) {
    doLast {
        // do sourcesJar & shadowJar & testsJar
        println("Artifact = ${project.group}:${project.name}:${project.version}")
    }
}

// Definitions for installing jar archives to local maven repository
def jarDir = 'build/libs'

def installArgs = ['mvn', 'install:install-file',
                "-DgroupId=${project.group}",
                "-DartifactId=${project.name}",
                "-Dversion=${project.version}",
                '-Dpackaging=jar',
                '-DgeneratePom=false']

task installJar(dependsOn: build, type: Exec) {
    def jarName = "${project.name}-${project.version}.jar"
    def appendArg = ["-Dfile=${jarDir}/${jarName}", "-DpomFile=pom.xml"]
    def argv = installArgs + appendArg
    commandLine(argv)
}

task installFatJar(dependsOn: shadowJar, type: Exec) {
    def jarName = "${project.name}-${project.version}-${suffixFatJar}.jar"
    def appendArg = ["-Dfile=${jarDir}/${jarName}", "-Dclassifier=${suffixFatJar}"]
    def argv = installArgs + appendArg
    commandLine(argv)
}

task installTestJar(dependsOn: testsJar, type: Exec) {
    def jarName = "${project.name}-${project.version}-${suffixTestJar}.jar"
    def appendArg = ["-Dfile=${jarDir}/${jarName}", "-Dclassifier=${suffixTestJar}"]
    def argv = installArgs + appendArg
    commandLine(argv)
}

task installArtifacts(dependsOn: [makeArtifacts, installJar, installTestJar]) {
    doLast {
        // install shadowJar & testsJar
        println("Install to local repository.")
        println("  Artifact = ${project.group}:${project.name}:${project.version}")
        println("  Classifier = [ default , ${suffixTestJar} ]")
    }
}

// Definitions for deploying jar archives to nexus maven repository
def deployArgs = ['mvn', 'deploy:deploy-file',
		'-DrepositoryId=nexus',
		"-Durl=${deployUrl}",
                "-DgroupId=${project.group}",
                "-DartifactId=${project.name}",
                "-Dversion=${project.version}",
                '-Dpackaging=jar',
                '-DgeneratePom=false']

task deployJar(dependsOn: build, type: Exec) {
    def jarName = "${project.name}-${project.version}.jar"
    def appendArg = ["-Dfile=${jarDir}/${jarName}", "-DpomFile=pom.xml"]
    def argv = deployArgs + appendArg
    commandLine(argv)
}

task deployFatJar(dependsOn: shadowJar, type: Exec) {
    def jarName = "${project.name}-${project.version}-${suffixFatJar}.jar"
    def appendArg = ["-Dfile=${jarDir}/${jarName}", "-Dclassifier=${suffixFatJar}"]
    def argv = deployArgs + appendArg
    commandLine(argv)
}

task deployTestJar(dependsOn: testsJar, type: Exec) {
    def jarName = "${project.name}-${project.version}-${suffixTestJar}.jar"
    def appendArg = ["-Dfile=${jarDir}/${jarName}", "-Dclassifier=${suffixTestJar}"]
    def argv = deployArgs + appendArg
    commandLine(argv)
}

task deployArtifacts(dependsOn: [deployJar, deployTestJar]) {
    doLast {
        // deploy shadowJar & testsJar
        println("Deploy to nexus repository.")
        println("  Artifact = ${project.group}:${project.name}:${project.version}")
        println("  Classifier = [ default , ${suffixTestJar} ]")
    }
}
